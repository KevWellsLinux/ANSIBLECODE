- hosts: laptops 
  gather_facts: 'yes'
  become: 'yes'
  tasks:
    - name: Copy hosts file
      ansible.builtin.copy:
        src: /etc/hosts
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'
    - name: Copy /usr/local/bin folder
      ansible.builtin.copy:
        src: /usr/local/bin/
        dest: /usr/local/bin/
        owner: root
        group: root
        mode: '0755'

    - name: Install zerotier-one vpn
      ansible.builtin.apt:
        name: zerotier
        state: present 

    - name: Perform a dist-upgrade.
      ansible.builtin.apt:
        upgrade: dist
        update_cache: 'yes'
    - name: Check if a reboot is required.
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_md5: 'no'
      register: reboot_required_file
    - name: Reboot the server (if required).
      ansible.builtin.reboot: null
      when: reboot_required_file.stat.exists == true
    - name: Remove dependencies that are no longer required.
      ansible.builtin.apt:
        autoremove: 'yes'

    - name: install brave-browser dependencies
      ansible.builtin.apt:
        name: apt-transport-https curl 
        state: present

    - name: Download gpg keys for brave-browser
      ansible.builtin.get_url:
        url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        dest: /usr/share/keyrings/brave-browser-archive-keyring.gpg

    - name: Add brave-browser repository into sources list
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main
        state: present
 


##  gpk keys:
## curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

# add the repo:
## echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"

# apt install brave-browser


    - name: install brave-browser 
      ansible.builtin.apt:
        name: brave-browser
        state: present

    - name: install terminator
      ansible.builtin.apt:
        name: terminator
        state: present
    - name: install virtualization system
      ansible.builtin.apt:
        name: cpu-checker
        state: present
    - name: install qemu-kvm
      ansible.builtin.apt:
        name: qemu-kvm
        state: present
    - name: Copy /home/kevin/shellscripts/ folder
      ansible.builtin.copy:
        src: /home/kevin/shellscripts/
        dest: /home/kevin/shellscripts/
        owner: kevin
        group: kevin
        mode: '0755'
    - name: install libvirt-clients
      ansible.builtin.apt:
        name: libvirt-clients
        state: present 
    - name: install libvirt-daemon-system
      ansible.builtin.apt:
        name: libvirt-daemon-system
        state: present
    - name: install bridge-utils
      ansible.builtin.apt:
        name: bridge-utils
        state: present
#next,start the kvm services and enable 
#systemctl enable libvirtd
# systemctl start libvirtd
## but above state: present  . could be enough, since we do not want to auto start these services, only start manually when needed

# add your desired user to the KVM and libvirt groups:
# usermod -aG kvm $USER
# usermod -aG libvirt $USER


    - name: install vlc 
      ansible.builtin.apt:
        name: vlc
        state: present



## to do : laptops:

# install brave browser
# dependencies: 
# apt install apt-transport-https curl
##  gpk keys:
# curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

# add the repo:
 ## echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"

# apt install brave-browser


# set up the crontab:

# this is our local data backup from the kevinvm1vpn NFS data share:

# NOTE: /home/kevin/LOCAL/STORAGEVOLUMELUKS contains STORAGEVOLUMELUKS encrypted data volume: 
# this is mounted manually using /usr/local/bin/mountdata
# this is the container which contains the data. 
# The crontab command below syncs the nfs mount of DATA from kevinvm1vpn server to this local encrypted volume:


# IF connected to and using DATA NFS Share on kevinvm1vpn as primary data location: 
##30 3 * * *   rsync -avu --update /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/DATAVOLUME/     /media/kevin/STORAGEVOLUMELUKS/DATAVOLUME/ 
##45 3 * * *   rsync -avu --update /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/ARCHIVEVOLUME/  /media/kevin/STORAGEVOLUMELUKS/ARCHIVEVOLUME/


# ELSE IF NOT using DATA NFS Share on kevinvm1vpn as primary data location, 
# but instead using local STORAGEVOLUMELUKS data volume as primary:
# in this case we sync in the opposite direction:

#### THIS HAS TO RUN AS KEVIN USER NOT ROOT! - so I have put it in the crontab for kevin:

##  30 3 * * *   rsync -avu --update  /media/kevin/STORAGEVOLUMELUKS/DATAVOLUME/      /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/DATAVOLUME/
##  45 3 * * *   rsync -avu --update  /media/kevin/STORAGEVOLUMELUKS/ARCHIVEVOLUME/   /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/ARCHIVEVOLUME/

##23 2 * * * rsync -av --update  /media/kevin/STORAGEVOLUMELUKS/  /media/kevin/KEVINVM1VPN/STORAGEVOLUMELUKS/

# dont run for now due to boot problems

#    - name: Configure crontab to run job rsync DATAVOLUME  
#      ansible.builtin.cron:
#        name: "rsync DATAVOLUME to AWS"
#        minute: "30"
#        hour: "3"
#        job: "rsync -avu --update  /media/kevin/STORAGEVOLUMELUKS/DATAVOLUME/      /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/DATAVOLUME/"

# dont run this on laptops as it causes boot delays

#    - name: Configure crontab to run job rsync DATAVOLUME  
#      ansible.builtin.cron:
#        name: "rsync ARCHIVEVOLUME to AWS"
#        minute: "45"
#        hour: "3"
#        job: "rsync -avu --update  /media/kevin/STORAGEVOLUMELUKS/ARCHIVEVOLUME/   /media/kevin/KEVINVM1VPN/srv/nfs4/NFSSHARE/ARCHIVEVOLUME/"


# create the mount point directories:


## mountpoint:  

##/media/kevin/KEVINVM1VPN

## for the script mountaws:  
## mount -v -t nfs -o proto=tcp,vers=4,nolock   kevinvm1vpn:/   /media/kevin/KEVINVM1VPN 


 # do not try to run this on laptops - causes boot problems due to aws server not reachable at boot
#    - name: Mount an NFS volume
 #     ansible.posix.mount:
  #      src: kevinvm1vpn:/
   #     path: /media/kevin/KEVINVM1VPN
    #    opts: rw,sync,hard
     #   state: mounted
      #  fstype: nfs




